package prvi;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;

public class Main {
	
	// realni broj
	static double a;
	
	// granicne vrednosti imenioca q
	static int n;
	static int m;
	
	// razlomci p/q
	public static ArrayList<Razlomak> razlomci = new ArrayList<>();
	
	// lista sa clanovima veriznog razvoja broja a
	public static ArrayList<Integer> verizniRazvoj = new ArrayList<>();
		
	// liste za algoritam sa pdf-a
	public static ArrayList<Double> nizX = new ArrayList<>();;
	public static ArrayList<Double> nizA = new ArrayList<>();;
	public static ArrayList<Double> nizD = new ArrayList<>();;
	
	// konvergente broja a
	public static ArrayList<Razlomak> konvergente = new ArrayList<>();
	// set sa konvergentama u vidu stringa
	public static HashSet<String> setKonvergenti = new HashSet<>();
	
	// aproksimacije I i II i N vrste
	public static ArrayList<Razlomak> aprokcimacije1 = new ArrayList<>();
	public static ArrayList<Razlomak> aprokcimacije2 = new ArrayList<>();
	public static ArrayList<Razlomak> aprokcimacijeN = new ArrayList<>();
	
	// formiranje svih p/q razlomaka
	public static void formirajRazlomke() {
		System.out.println("*****************************************************************");
		System.out.println("Svi razlomci: ");
		for(int i = n; i <= m; i++) {
			int q = i;
			int p = (int) Math.round((double) a * q);
			Razlomak razlomak = new Razlomak(p, q);
			razlomak.odrediVerizniRazvoj();
			razlomak.izracunajGreske(a);
			razlomci.add(razlomak);
			System.out.println(razlomak);
		}
	}
	
	// odredjivanje veriznih decimala broja a
	private static void odrediVerizniRazvoj() {
		// postavljanje pocetnih vrednosti u listama
		double x0 = a;
		double a0 = Math.floor(x0);
		double d0 = x0 - a0;
		nizX.add(x0); nizA.add(a0); nizD.add(d0);
		verizniRazvoj.add((int) Math.round(a0));
		
		// racunanje veriznih decimala
		for(int i = 0; i <= m - n; i++) {
			if (nizD.get(i) <= Razlomak.PRAG) {
				break;
			}
	        double x = 1.0 / nizD.get(i); nizX.add(x);
	        double a = Math.floor(x); nizA.add(a);
	        double d = x - a; nizD.add(d);
	        verizniRazvoj.add((int) a);
		}
		
		// azuriranje pretposlednje verizne decimale ukoliko je
	    // poslednja decimala jednaka 1
	    int brojClanova = verizniRazvoj.size();
	    if (brojClanova >= 2) {
	        int poslednjaDecimala = verizniRazvoj.get(brojClanova - 1);
	        if (poslednjaDecimala == 1) {
	            int pretposlednjaDecimala = verizniRazvoj.get(brojClanova - 2) + 1;
	            verizniRazvoj.set(brojClanova - 2, pretposlednjaDecimala);
	            verizniRazvoj.remove(brojClanova - 1);
	        }
	    }
		
	    // ispis clanova veriznog razvoja
	    System.out.println("*****************************************************************");
	    StringBuilder ispisBuilder = new StringBuilder();
	    ispisBuilder.append("[");

	    for(int i = 0; i < verizniRazvoj.size(); i++) {
	        if (i == 0) {
	            ispisBuilder.append(verizniRazvoj.get(i));
	            if (verizniRazvoj.size() > 1) {
	                ispisBuilder.append("; ");
	            }
	        } else {
	            ispisBuilder.append(verizniRazvoj.get(i));
	            if (i < (verizniRazvoj.size() - 1)) {
	                ispisBuilder.append(", ");
	            }
	        }
	    }
	    ispisBuilder.append("]");
		System.out.println("Verizni razvoj broja a: " + ispisBuilder.toString());
	}
	
	// racunanje konvergenti broja a
	public static void odrediKonvergente() {
        // racunanje prve dve konvergente
		long p0 = verizniRazvoj.get(0); 
		long q0 = 1;
		konvergente.add(new Razlomak(p0, q0));
		setKonvergenti.add(p0 + "/" + q0);
		long p1 = p0 * verizniRazvoj.get(1) + 1;
		long q1 = verizniRazvoj.get(1);
		konvergente.add(new Razlomak(p1, q1));
		setKonvergenti.add(p1 + "/" + q1);
		
		// racunanje ostalih konvergenti rekurentnom formulom
		for (int j = 2; j < verizniRazvoj.size(); j++) {
			long p = konvergente.get(j - 1).p * verizniRazvoj.get(j) + konvergente.get(j - 2).p;
			long q = konvergente.get(j - 1).q * verizniRazvoj.get(j) + konvergente.get(j - 2).q;
			konvergente.add(new Razlomak(p, q));
			setKonvergenti.add(p + "/" + q);
		}
		
		// ispis konvergenti
		System.out.println("*****************************************************************");
		System.out.print("Konvergente: ");
		System.out.println(konvergente);
	}
	
	// podela razlomaka na aprokscimacije I, II i N vrste
	public static void odrediAproksimacije() {
		for(int i = 0; i < razlomci.size(); i++) {
			Razlomak razlomak = razlomci.get(i);
			// provera da li je razlomak nakon skracivanja u konvergentama
			long nzd = razlomak.nzd();
			long p = razlomak.p / nzd;
			long q = razlomak.q / nzd;
			String s = p + "/" + q;
			// konvergente su aproksimacije II vrste
			if(setKonvergenti.contains(s)) {
				aprokcimacije2.add(razlomak);
				continue;
			}
			
			// provera da li je manja greska nego u prethodnicima
			double apsGreska = Math.abs(razlomak.greska_prve_vrste);
			boolean najboljaAproksimacija = true;
			for (int j = i - 1; j >= 0; j--) {
		        Razlomak prethodni = razlomci.get(j);
		        double apsGreskaPrethodni = Math.abs(prethodni.greska_prve_vrste);
		        if(apsGreskaPrethodni <= apsGreska) {
		          najboljaAproksimacija = false;
		          break;
		       }
		    }
		    if(najboljaAproksimacija) {
		        aprokcimacije1.add(razlomak);
		    }
		}
	}
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		
		// unos alpha
        System.out.print("Unesite realan broj: ");
        a = scanner.nextDouble();   
        // unos n
        System.out.print("Unesite pozitivan ceo broj n: ");
        n = scanner.nextInt();
        // unos m
        System.out.print("Unesite pozitivan ceo broj m veci od n: ");
        m = scanner.nextInt();
        
        formirajRazlomke();
        odrediVerizniRazvoj();
        odrediKonvergente();
        odrediAproksimacije();
        System.out.println(aprokcimacije1);
        System.out.println(aprokcimacije2);
        
        scanner.close();
	}
}
